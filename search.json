[{"categories":[null],"content":"this is my first bolg page test ","date":"2024-10-11","objectID":"/posts/test/:0:0","tags":[null],"title":"Test","uri":"/posts/test/"},{"categories":[null],"content":"this is test test page ","date":"2024-10-11","objectID":"/posts/test/:1:0","tags":[null],"title":"Test","uri":"/posts/test/"},{"categories":null,"content":"#HAproxy安装部署 下载地址：http://www.haproxy.org/download/1.7/src/haproxy-1.7.8.tar.gz 下载后安装上传服务器安装： tar xvf haproxy-1.7.8.tar.gz cd haproxy-1.7.8 make TARGET=linux2632 PREFIX=/usr/local/haproxy make install PREFIX=/usr/local/haproxy mkdir -p /usr/local/haproxy/conf ##haproxy启动脚本样例 #!/bin/bash # # haproxy # # chkconfig: 35 85 15 # description: HAProxy is a free, very fast and reliable solution \\ # offering high availability, load balancing, and \\ # proxying for TCP and HTTP-based applications # processname: haproxy # config: /etc/haproxy.cfg # pidfile: /var/run/haproxy.pid # Source function library. . /etc/rc.d/init.d/functions # Source networking configuration. . /etc/sysconfig/network # Check that networking is up. [ \"$NETWORKING\" = \"no\" ] \u0026\u0026 exit 0 config=\"/usr/local/haproxy/conf/haproxy.cfg\" exec=\"/usr/local/haproxy/sbin/haproxy\" prog=$(basename $exec) [ -e /etc/sysconfig/$prog ] \u0026\u0026 . /etc/sysconfig/$prog lockfile=/var/lock/subsys/haproxy check() { $exec -c -V -f $config } start() { $exec -c -q -f $config if [ $? -ne 0 ]; then echo \"Errors in configuration file, check with $prog check.\" return 1 fi echo -n $\"Starting $prog: \" # start it up here, usually something like \"daemon $exec\" daemon $exec -D -f $config -p /var/run/$prog.pid retval=$? echo [ $retval -eq 0 ] \u0026\u0026 touch $lockfile return $retval } stop() { echo -n $\"Stopping $prog: \" # stop it here, often \"killproc $prog\" killproc $prog retval=$? echo [ $retval -eq 0 ] \u0026\u0026 rm -f $lockfile return $retval } restart() { $exec -c -q -f $config if [ $? -ne 0 ]; then echo \"Errors in configuration file, check with $prog check.\" return 1 fi stop start } reload() { $exec -c -q -f $config if [ $? -ne 0 ]; then echo \"Errors in configuration file, check with $prog check.\" return 1 fi echo -n $\"Reloading $prog: \" $exec -D -f $config -p /var/run/$prog.pid -sf $(cat /var/run/$prog.pid) retval=$? echo return $retval } force_reload() { restart } fdr_status() { status $prog } case \"$1\" in start|stop|restart|reload) $1 ;; force-reload) force_reload ;; checkconfig) check ;; status) fdr_status ;; condrestart|try-restart) [ ! -f $lockfile ] || restart ;; *) echo $\"Usage: $0 {start|stop|status|checkconfig|restart|try-restart|reload|force-reload}\" exit 2 esac ##haproxy配置文件样例 global log 127.0.0.1 local3 maxconn 65535 chroot /usr/local/haproxy uid 1000 gid 1000 daemon nbproc 1 pidfile /var/run/haproxy.pid defaults log 127.0.0.1 local3 mode http option httplog option httpclose option dontlognull option forwardfor option redispatch retries 2 maxconn 2000 balance roundrobin stats uri /status stats auth admin:admin123 timeout connect 5000 timeout client 50000 timeout server 50000 listen web_proxy bind 0.0.0.0:80 mode http balance roundrobin cookie SERVERID insert indirect nocache option httpclose option forwardfor option accept-invalid-http-request option httpchk HEAD /index.php HTTP/1.0 server web01 10.0.11.156:80 weight 5 check inter 2000 fall 3 server web02 10.0.11.157:80 weight 5 check inter 2000 fall 3 server web03 10.0.11.158:80 weight 5 check inter 2000 fall 3 server web04 10.0.11.159:80 weight 5 check inter 2000 fall 3 ##haproxy日志添加 vim /etc/syslog.conf 添加： local3.* /var/log/haproxy.log local0.* /var/log/haproxy.log vim /etc/sysconfig/syslog 修改： SYSLOGD_OPTIONS=\"-r -m 0\" service syslog restart ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"#inotify+rsync安装部署 ##检查是否安装xinetd、rsync是否安装 [root@IM-web-01 ~] rpm -qa |grep xinetd rsync #查看xinetd、rsync是否安装 [root@IM-web-01 ~] yum -y install xinetd rsync #如果没有安装则yum安装两个服务 [root@IM-web-01 ~] chkconfig xinetd on #添加xinetd自启动 [root@IM-web-01 ~] chkconfig rsync on #添加rsync自启动 [root@IM-web-01 ~] /etc/init.d/xinetd start #启动xinetd守护进程服务 [root@IM-web-01 ~] useradd www -s /sbin/nologin #创建同步rsync同步用户 [root@IM-web-01 ~] chown www.www /usr/local/nginx/html ###rsync服务端配置文件样例 [root@IM-web-01 ~] vim /etc/rsyncd.conf uid = www gid = www use chroot = no max connections = 200 timeout = 300 pid file = /var/run/rsyncd.pid lock file = /var/run/rsync.lock log file = /var/log/rsyncd.log [web] path = /usr/local/nginx/html/ ignore errors read only = no write only = no list = false hosts allow = 10.0.11.0/24 hosts deny = 0.0.0.0/32 uid = www gid = www secrets file = /etc/rsync.password 编写密码文件: [root@IM-web-01 ~] echo \"www:www\" \u003e /etc/rsync.password #创建配置服务端密码文件 [root@IM-web-01 ~] chmod 600 /etc/rsync.password #配置密码文件为只读模式,增加安全性 [root@IM-web-01 ~] rsync --daemon #后台启动rsync ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"inotify、rsync客户端安装配置 GitHub地址：https://github.com/rvoicilas/inotify-tools/wiki 下载地址：http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz 上传服务器进行安装部署 [root@IM-web-01 ~] tar xvf inotify-tools-3.14.tar.gz [root@IM-web-01 ~] cd inotify-tools-3.14 [root@IM-web-01 ~] ./configure –prefix=/usr/local/inotify [root@IM-web-01 ~] make \u0026\u0026 make install 创建rsync密码文件并配置只读模式 [root@IM-web-01 ~] echo “www” \u003e /etc/rsync.password　#切记这里只写密码即可 [root@IM-web-01 ~] chmod 600 /etc/rsync.password ###检查当前系统是否支持inotify [root@IM-web-01 ~]# ll /proc/sys/fs/inotify/ 总用量 0 -rw-r--r-- 1 root root 0 7月 10 20:28 max_queued_events -rw-r--r-- 1 root root 0 7月 10 20:28 max_user_instances -rw-r--r-- 1 root root 0 7月 10 20:28 max_user_watches 拓展： /proc/sys/fs/inotify/max_queued_evnets 表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。 /proc/sys/fs/inotify/max_user_instances 表示每一个real user ID可创建的inotify instatnces的数量上限。 /proc/sys/fs/inotify/max_user_watches 表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。 例如： echo 30000000 \u003e /proc/sys/fs/inotify/max_user_watches ###inotify命令讲解 [root@IM-web-01 inotify]# ./bin/inotifywait --help -r|--recursive Watch directories recursively. #递归查询目录 -q|--quiet Print less (only print events). #打印监控事件的信息 -m|--monitor Keep listening for events forever. Without this option, inotifywait will exit after one event is received. #始终保持事件监听状态 --excludei \u003cpattern\u003e Like --exclude but case insensitive. #排除文件或目录时，不区分大小写。 --timefmt \u003cfmt\u003e strftime-compatible format string for use with %T in --format string. #指定时间输出的格式 --format \u003cfmt\u003e Print using a specified printf-like format string; read the man page for more details. #打印使用指定的输出类似格式字符串 -e|--event \u003cevent1\u003e [ -e|--event \u003cevent2\u003e ... ] Listen for specific event(s). If omitted, all events are listened for. #通过此参数可以指定需要监控的事件，如下所示: Events： access file or directory contents were read #文件或目录被读取。 modify file or directory contents were written #文件或目录内容被修改。 attrib file or directory attributes changed #文件或目录属性被改变。 close file or directory closed, regardless of read/write mode #文件或目录封闭，无论读/写模式。 open file or directory opened #文件或目录被打开。 moved_to file or directory moved to watched directory #文件或目录被移动至另外一个目录。 move file or directory moved to or from watched directory #文件或目录被移动另一个目录或从另一个目录移动至当前目录。 create file or directory created within watched directory #文件或目录被创建在当前目录 delete file or directory deleted within watched directory #文件或目录被删除 unmount file system containing file or directory unmounted #文件系统被卸载 ###inotify实时同步脚本样例 #!/bin/bash #by liangml host02=10.0.11.157 host03=10.0.11.158 host04=10.0.11.159 src=/usr/local/nginx/html/ dst=web user=www rsync_passfile=/etc/rsync.password inotify_home=/usr/local/inotify #judge if [ ! -e \"$src\" ] \\ || [ ! -e \"${rsync_passfile}\" ] \\ || [ ! -e \"${inotify_home}/bin/inotifywait\" ] \\ || [ ! -e \"/usr/bin/rsync\" ]; then echo \"Check File and Folder\" exit 9 fi ${inotify_home}/bin/inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %w%f' -e close_write,delete,create,attrib $sr c \\ | while read file do # rsync -avzP --delete --timeout=100 --password-file=${rsync_passfile} $src $user@$host01::$dst \u003e/dev/null 2\u003e\u00261 cd $src \u0026\u0026 rsync -aruz -R --delete ./ --timeout=100 $user@$host02::$dst --password-file=${rsync_passfile} \u003e/dev/null 2\u003e\u00261 cd $src \u0026\u0026 rsync -aruz -R --delete ./ --timeout=100 $user@$host03::$dst --password-file=${rsync_passfile} \u003e/dev/null 2\u003e\u00261 cd $src \u0026\u0026 rsync -aruz -R --delete ./ --timeout=100 $user@$host04::$dst --password-file=${rsync_passfile} \u003e/dev/null 2\u003e\u00261 done exit 0 将同步文件后台运行echo “nohup sh inotify.sh \u0026” » /etc/rc.local ##测试： [root@IM-web-01 ~] rsync -avz test.txt www@10.0.11.157::web –password-file=/etc/rsync.password ","date":"0001-01-01","objectID":"/posts/:1:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"keepalived安装部署 下载最新软件：http://www.keepalived.org/software/keepalived-1.3.5.tar.gz 上传服务器安装： tar xvf http://www.keepalived.org/software/keepalived-1.3.5.tar.gz cd keepalived-1.3.5 ./configure --prefix=/usr/local/keepalived make \u0026\u0026 make install ln -s /usr/local/keepalived/sbin/ /usr/bin/ ln -s /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/ cp /root/keepalived-1.3.5/keepalived/etc/init.d/keepalived.rh.init /etc/init.d/keepalived mkdir /etc/keepalived echo 1 \u003e /proc/sys/net/ipv4/ip_forward　#开启路由转发功能 echo 1 \u003e /proc/sys/net/ipv4/ip_nonlocal_bind #开启允许绑定非本机IP ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"配置文件样例 ! Configuration File for keepalived global_defs { notification_email { liangml0528@163.com } notification_email_from Alexandre.Cassen@firewall.loc smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id LVS_DEVEL } vrrp_script chk_http_port { script \"/root/check_haproxy.sh\" interval 2 weight 2 } vrrp_instance VI_1 { state MASTER interface eth1 virtual_router_id 51 priority 100 advert_int 1 mcast_src_ip 10.0.11.154 authentication { auth_type PASS auth_pass 1111 } track_script { chk_http_port } virtual_ipaddress { 10.0.11.16/24 } } ","date":"0001-01-01","objectID":"/posts/:1:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"haproxy检查脚本（需要添加执行权限） #!/bin/bash status=`ps aux|grep haproxy | grep -v grep | grep -v bash | wc -l` if [ \"${status}\" = \"0\" ]; then /etc/init.d/haproxy start fi status2=`ps aux|grep haproxy | grep -v grep | grep -v bash |wc -l` if [ \"${status2}\" = \"0\" ]; then /etc/init.d/keepalived stop fi ","date":"0001-01-01","objectID":"/posts/:2:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"日志添加 默认日志存放在系统的/var/log/messages下 把日志单独存放需要修改/etc/sysconfig/keepalived 在/etc/rsyslog.conf末尾添加 重启日志服务 /etc/init.d/rsyslog restart 重启keepalived /etc/init.d/keepalived 查看日志 ","date":"0001-01-01","objectID":"/posts/:3:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":" Linux系统往往有添加磁盘不够的情况，这时就需要添加新的硬盘。一般情况下需要重启服务器，这里我们来使用线刷方式读取Linux新增硬盘** 1.添加磁盘后fdisk -l磁盘没有显示** 2.查看主机总线号** 3.重新扫描scsi总线来添加设备** [root@localhost ~]# echo \"- - -\" \u003e /sys/class/scsi_host/host0/scan [root@localhost ~]# echo \"- - -\" \u003e /sys/class/scsi_host/host1/scan [root@localhost ~]# echo \"- - -\" \u003e /sys/class/scsi_host/host2/scan 4.再次查看硬盘已经显示** ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"MySQL源码5.5.36 =» 5.6.37升级 升级的方法一般有两类： 1.利用mysqldump来直接导出sql文件，导入到新库中，这种方法是最省事儿的，也是最保险的，缺点的话，也显而易见，大库的mysqldump费时费力。 2.直接替换掉mysql的安装目录和my.cnf，利用mysql_upgrade 来完成系统表的升级，这种方法需要备份原有的文件，但属于物理拷贝，速度较快。缺点的话，跨版本升级不推荐这么做，比如mysql5.1升级到mysql5.6,mysql5.5升级到mysql5.7等。 本文采用的是第二种方法升级。 MySQL当前版本 [root@localhost ~]# /usr/local/mysql/bin/mysql -V /usr/local/tdoa/mysql/bin/mysql Ver 14.14 Distrib 5.5.36, for Linux (x86_64) using readline 5.1 备份my.cnf、MySQL安装目录、MySQL数据目录 [root@localhost ~]# cp -p /etc/init.d/mysql /etc/init.d/mysql.old [root@localhost ~]# cp -p /etc/my.cnf /etc/my.cnf.old [root@localhost ~]# cp -rp /usr/local/mysql /usr/local/mysql.old [root@localhost ~]# rm -rf /usr/local/mysql 安装最新版本的MySQL [root@localhost ~]# tar xvf mysql-5.6.37.tar.gz [root@localhost ~]# cd mysql-5.6.37 [root@localhost ~]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/tdoa/mysql \\ -DMYSQL_DATADIR=/usr/local/tdoa/data5 \\ -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DEXTRA_CHARSETS=all \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DDEFAULT_CHARSET=utf8 \\ -DMYSQL_TCP_PORT=3336 \\ -DWITH_READLINE=1 \\ -DENABLED_LOCAL_INFILE=1 \\ -DMYSQL_USER=mysql \\ -DWITH_DEBUG=0 [root@localhost ~]# make [root@localhost ~]# make install [root@localhost ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf [root@localhost ~]# cat /etc/my.cnf.old \u003e /etc/my.cnf [root@localhost ~]# cp -p /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql [root@localhost ~]# /usr/local/mysql/scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/data5 [root@localhost ~]# chown mysql.mysql -R /usr/local/tdoa/mysql [root@localhost ~]# chown mysql.mysql -R /usr/local/tdoa/data5 [root@localhost ~]# /etc/init.d/mysql start [root@localhost ~]# ps -ef |grep mysql [root@localhost ~]# /etc/init.d/mysql stop [root@localhost ~]# /usr/local/data5 /usr/local/data5.newold [root@localhost ~]# mv /usr/local/data5.old /usr/local/data5 [root@localhost ~]# /etc/init.d/mysql start [root@localhost ~]# /usr/local/mysql/bin/mysql_upgrade -uroot -pxxxx 升级后的MySQL版本 [root@localhost ~]# /usr/local/tdoa/mysql/bin/mysql -V /usr/local/tdoa/mysql/bin/mysql Ver 14.14 Distrib 5.6.37, for Linux (x86_64) using EditLine wrapper 请保证一些路径的设置和以前的my.cnf一致，如果设置错误，很可能导致启动不了数据库 [ERROR] Could not use /usr/local/data5/slowlog/slow.log for logging 我这里是由于慢日志的位置和老的mysql5.6路径不一致，创建/data/slowlog即可，这里要仔细看报错，然后根据报错来发现和解决问题。 ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"#nfs安装部署 [root@IM-web-01 ~] rpm -qa |grep nfs-utils rpcmind #检查软件是否安装 [root@IM-web-01 ~] yum -y install nfs-utils rpcmind #如果没有则使用yum安装 [root@IM-web-01 ~] chkconfig rpcmind on [root@IM-web-01 ~] chkconfig nfs on ##编辑配置文件将需要共享的目录进行配置 exports文件格式 \u003c输出目录\u003e [客户端1 选项（访问权限,用户映射,其他）] [root@IM-web-01 ~] vim /etc/exports /data 10.0.11.0/24(rw,sync,no_root_squash,no_all_squash) ##客户端挂载 [root@IM-web-01 ~] mount -t nfs -o nosuid,noexec,bg,soft 172.16.211.48:/data /data/ ##nfs常用目录 /etc/exports #NFS服务的主要配置文件 /usr/sbin/exportfs #NFS服务的管理命令 /usr/sbin/showmount #客户端的查看命令 /var/lib/nfs/etab #记录NFS分享出来的目录的完整权限设定值 /var/lib/nfs/xtab #记录曾经登录过的客户端信息 ##nfs服务端参数讲解 NFS主要有3类选项： 访问权限选项 设置输出目录只读：ro 设置输出目录读写：rw 用户映射选项 all_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组（nfsnobody）； no_all_squash：与all_squash取反（默认设置）； root_squash：将root用户及所属组都映射为匿名用户或用户组（默认设置）； no_root_squash：与rootsquash取反； anonuid=xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户（UID=xxx）； anongid=xxx：将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户（GID=xxx）； 其它选项 secure：限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）； insecure：允许客户端从大于1024的tcp/ip端口连接服务器； sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性； async：将数据先保存在内存缓冲区中，必要时才写入磁盘； wdelay：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率（默认设置）； no_wdelay：若有写操作则立即执行，应与sync配合使用； subtree：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)； no_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率； ##nfs相关命令 1、exportfs 如果我们在启动了NFS之后又修改了/etc/exports，是不是还要重新启动nfs呢？这个时候我们就可以用exportfs 命令来使改动立刻生效，该命令格式如下： # exportfs [-aruv] -a 全部挂载或卸载 /etc/exports中的内容 -r 重新读取/etc/exports 中的信息 ，并同步更新/etc/exports、/var/lib/nfs/xtab -u 卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录） -v 在export的时候，将详细的信息输出到屏幕上。 具体例子： # exportfs -au 卸载所有共享目录 # exportfs -rv 重新共享所有目录并输出详细信息 2、nfsstat 查看NFS的运行状态，对于调整NFS的运行有很大帮助。 3、rpcinfo 查看rpc执行信息，可以用于检测rpc运行情况的工具，利用rpcinfo -p 可以查看出RPC开启的端口所提供的程序有哪些。 4、showmount -a 显示已经于客户端连接上的目录信息 -e IP或者hostname 显示此IP地址分享出来的目录 5、netstat 可以查看出nfs服务开启的端口，其中nfs 开启的是2049，portmap 开启的是111，其余则是rpc开启的。 最后注意两点，虽然通过权限设置可以让普通用户访问，但是挂载的时候默认情况下只有root可以去挂载，普通用户可以执行sudo。 NFS server 关机的时候一点要确保NFS服务关闭，没有客户端处于连接状态！通过showmount -a 可以查看，如果有的话用kill killall pkill 来结束，（-9 强制结束） ##nfs客户端配置 ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"Nginx平滑升级 点击下载Nginx_1.12.1: nginx版本：1.8.0 nginx升级版本:1.12.1 nginx -v #查看当前Nginx版本 nginx -V #查看当前Nginx编译参数 在执行编译时会报错没有–with-http_spdy_module选项（nginx 1.9.5 已经没有了 –with-http_spdy_module ，取代的是 –with-http_v2_module），查看官方模块地址：http://nginx.org/en/docs/ 开始部署 [root@localhost src]#tar xvf nginx-1.12.1.tar.gz [root@localhost nginx-1.12.1]# cd nginx-1.12.1 [root@localhost nginx-1.12.1]# ./configure --user=tdoa --group=tdoa --prefix=/usr/local/tdoa/nginx --with-file-aio --with-http_stub_status_module --with-http_gzip_static_module --with-pcre=/root/linux-2015/down/pcre-8.32 --with-pcre-jit --with-http_v2_module [root@localhost nginx-1.12.1]# make 执行make后，make install无需执行，将现有nginx重命名 [root@localhost objs]# mv /usr/local/tdoa/nginx/sbin/nginx /usr/local/tdoa/nginx/sbin/nginx.old [root@localhost objs]# pwd /usr/local/src/nginx-1.12.1/objs [root@localhost objs]# cp nginx nginx nginx.8 [root@localhost objs]# cp nginx /usr/local/tdoa/nginx/sbin/ [root@localhost objs]# /usr/local/tdoa/nginx/sbin/nginx -v nginx version: nginx/1.12.1 [root@localhost objs]# /usr/local/tdoa/nginx/sbin/nginx -t nginx: the configuration file /usr/local/tdoa/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/tdoa/nginx/conf/nginx.conf test is successful [root@localhost objs]# /usr/local/tdoa/nginx/sbin/nginx -s reload [root@localhost objs]# netstat -tnlp |grep 80 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 98457/nginx tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN 1680/cupsd tcp 0 0 ::1:631 :::* LISTEN 1680/cupsd ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"工作中常常有写不能有网页下载东西的需求，在Apache下搭建完成后直接导入文件即可达到下载/显示文件的效果，而Nginx也可以满足这样的需求(nginx 目录列表功能默认是关闭的)，这时就需要配置。 ngx_http_autoindex_module:此模块用于自动生成目录列表（ngx_http_autoindex_module只在ngx_http_index_module模块未找到索引文件时发出请求） 开启目录列表功能 1.打开nginx.conf文件，在location server或http中加入 autoindex on;　#自动显示目录 autoindex_exact_size off;　#人性化方式显示文件大小否则以byte显示 autoindex_localtime on;　#按服务器时间显示，否则以gmt时间显示 ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"Nginx: nginx 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。 1.配yum，安装FTP，上传pcre,nginx软件 yum -y install gcc gcc-c++ make libtool 安装编译工具 service vsftpd start 上传pcre-.... nginx-.......... PCRE:perl兼容的正则表达式库 2.安装相关开发库 yum -y install glib2-devel openssl-devel pcre-devel bzip2-devel gzip-devel perl-devel · 3.安装pcre库 tar xvf pcre-8.33.tar.gz cd pcre-... ./configure --prefix=/usr/local/pcre make \u0026\u0026make install 4.安装nginx tar zxcf nginx-1.4.4.....tar.gz cd nginx-... ./configure --prefix=/usr/local/nginx make \u0026\u0026make install 5.配置nginx /usr/local/nginx/sbin/nginx 开启nginx服务 测试 显示welcome to nginx 服务正常 网站根目录/usr/local/nginx/html 主页index.html 主配置文件/usr/local/nginx/conf/nginx.conf # 基于端口的虚拟主机 主配置文件/usr/local/nginx/conf/nginx.conf server { listen 80; root /www/local; } ...... server { listen 8080; root /www/local; } 基于IP的虚拟主机 主配置文件/usr/local/nginx/conf/nginx.conf server { listen 192.168.1.100:80; root /www/local; index index.html; } ...... server { listen 192.168.1.110:80; root /www/local; index index.html; } 基于域名的虚拟主机且做访问控制 主配置文件/usr/local/nginx/conf/nginx.conf server { listen 80; server_name www.local.com; location / { root /www/local; index index.html index.htm; auth_basic \"***\";#访问控制 auth_basic_user_file /usr/local/nginx/passwd.db; } } ...... server { listen 80; server_name www.local.com; location / { root /www/local; index index.html index.htm; } } htpasswd -c /usr/local/nginx/passwd.db tom 输入密码 由于成本（IP）和客户使用习惯（端口）的限制，相对没有基于域名的虚拟主机多 为Nginx建立用户 ： /usr/sbin/useradd -c “Nginx user” -s /bin/false -r -d /var/lib/nginx nginx 将nginx添加到认证文件中并设置登录网站的密码： htpasswd /usr/local/nginx/passwd.db nginx 单独创建虚拟主机的配置文件 主配置文件/usr/local/nginx/conf/nginx.conf server { listen 80; servername location /{ root html 相对路径，变绝对路径要加/ index } } http { include vhost.conf; 虚拟主机的主配置文件可以单独创建，默认存放在当前路径 。。。。 } #新建vhost.conf server { listen 80; 改成80端口 #listen somename:8080; server_name somename alias another.alias;（www.wg.com） location / { root /www/wg; index index.html index.htm; } } 一个虚拟主机配置完成，更多的虚拟主机，只需重复粘贴在此文件中，改域名路径即可 基于域名的虚拟主机，配置DNS 分别写各网站主页 重启nginx: (1) killall nginx 结束nginx进程 (2) /usr/local/nginx/sbin/nginx 开启nginx服务 测试 配置nginx负载均衡 客户端的请求通过 proxy_pass 指令传送给后端的服务器，从而实现负载均衡。 vim /usr/local/nginx/conf/nginx.conf server { listen 80; location /{ proxy_pass http://nlb ;反向代理， } } #将请求分配给后端的两台服务器以及自身的8080端口，实现负载均衡 upstream nlb{ server 127.0.0.1:8080 weight=2; #weight：权重值 server 172.18.10.101 weight=1; server 172.18.10.102 weight=1; } #本机8080端口站点：/usr/local/nginx/nlb server { Listen 8080; root /usr/local/nginx/nlb； } 在 Nginx 的集群配置中，Nginx 使用最简单的平均分配规则给集群中的每个节点分配请求。一旦某个节点失效时，或者重新起效时，Nginx 都会非常及时的处理状态的变化，以保证不会影响到用户的访问。 动态页面请求处理 Nginx 本身并不支持现在流行的 JSP、ASP、PHP、PERL 等动态页面，但是它可以通过反向代理将请求发送到后端的服务器，例如 Tomcat、Apache、IIS 等来完成动态页面的请求处理。方法同上。 ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"},{"categories":null,"content":"php平滑升级 1.既然是平滑升级，是不需要宕机，也不需要停止服务，是不存在关闭网站的说法 2.而升级最后的重启，重启的是PHP加载的配置文件，不影响你当前运行的网站 3.php-fpm是属于FastCgi，一旦启动是在内存中跑的，和你编译升级的过程没有任何关系 系统:centos6.8 php环境:php5.3.29 升级版本:php5.4.45 下载php地址:http://www.php.net/distributions/php-5.4.45.tar.gz 将php5.3.29安装目录config.nice复制到php-5.4.25 [root@localhost php-5.4.45]# cp /php-5.3.29/config.nice /usr/local/src/php-5.4.45 [root@localhost php-5.4.45]# cd php-5.4.45/ [root@localhost php-5.4.45]# ./config.nice [root@localhost php-5.4.45]# make ZEND_EXTRA_LIBS=’-liconv' [root@localhost php-5.4.45]# make install ##升级完成后建议执行命令： You may want to add: /usr/local/php5/lib/php to your php.ini include_path /usr/local/src/php-5.4.45/build/shtool install -c ext/phar/phar.phar /usr/local/php5/bin ln -s -f /usr/local/php5/bin/phar.phar /usr/local/php5/bin/phar Installing PDO headers: /usr/local/php5/include/php/ext/pdo/ ##安装中可能遇到错误 原因:在安裝 PHP 到系统中时要是发生「undefined reference to libiconv_open’」之类的错误信息，那表示在「./configure 」沒抓好一些环境变数值。错误发生点在建立「-o sapi/cli/php」是出错，没給到要 link 的 iconv 函式库参数。 第一种解决方法：编辑Makefile 大约77 行左右的地方: EXTRA_LIBS = ….. -lcrypt 在最后加上 -liconv，例如: EXTRA_LIBS = ….. -lcrypt -liconv 然后重新再次 make 即可。 第二种解决方法： make ZEND_EXTRA_LIBS=’-liconv' ln -s /usr/local/lib/libiconv.so.2 /usr/lib64/ ##curl升级 情况说明：curl是默认使用yum安装SSL version为NSS，现有项目需要支持OpenSSL。 当前curl版本 phpinfo输出信息 下载最新的curl：https://curl.haxx.se/download/curl-7.54.1.tar.gz 开始升级: [root@IM-web-03 html]# rpm -qa |grep curl libcurl-devel-7.19.7-53.el6_9.x86_64 curl-7.19.7-53.el6_9.x86_64 libcurl-7.19.7-53.el6_9.x86_64 python-pycurl-7.19.0-9.el6.x86_64 [root@IM-web-03 html]# rpm -e curl-7.19.7-53.el6_9.x86_64 --nodeps [root@IM-web-03 ~]# tar xvf curl-7.54.1.tar.gz [root@IM-web-03 ~]# cd curl-7.54.1 [root@IM-web-03 curl-7.54.1]# ./configure --prefix=/usr/local/curl --without-nss --with-ssl #关闭NSS 开启OpenSSL [root@IM-web-03 curl-7.54.1]# make [root@IM-web-03 curl-7.54.1]# make install [root@IM-web-03 curl-7.54.1]# rm -rf /usr/lib64/libcurl.so.4* #删除原有的动态库 [root@IM-web-03 curl-7.54.1]# ln -s /usr/local/curl/lib/libcurl.so.4* /usr/lib64/ #将新动态库放到对应位置 [root@IM-web-03 curl-7.54.1]# ldconfig #刷新动态库 [root@IM-web-03 ~]# cd php-5.3.29/ext/curl/ [root@IM-web-03 curl]# /usr/local/php5/bin/phpize [root@IM-web-03 curl]# ./configure --with-curl=/usr/local/curl/ --with-php-config=/usr/local/php5/bin/php-config [root@IM-web-03 curl]# make [root@IM-web-03 curl]# make install [root@IM-web-03 curl]# vim /usr/local/php5/etc/php.ini 添加：extension=\"/usr/local/php5/lib/php/extensions/no-debug-non-zts-20090626/curl.so\" [root@IM-web-03 curl]# /etc/init.d/php-fpm restart 升级后查看版本curl、PHPinfo版本信息 ","date":"0001-01-01","objectID":"/posts/:0:0","tags":null,"title":"","uri":"/posts/"}]